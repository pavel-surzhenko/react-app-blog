{"version":3,"sources":["lib/redux/types/auth.js","lib/redux/types/posts.js","lib/redux/types/password.js","lib/redux/reducers/auth.js","lib/redux/reducers/posts.js","lib/redux/reducers/password.js","lib/redux/init/rootReducer.js","lib/redux/init/middleware.js","lib/redux/init/store.js","components/Footer/index.js","components/Comment/index.js","api/config.ts","api/api.js","hooks/usePosts.js","hooks/useRecentComments.js","lib/redux/actions/auth.js","lib/redux/actions/posts.js","constants/toastOptions.js","lib/redux/actions/password.js","hooks/useProfile.js","hooks/useToken.js","hooks/useComment.js","components/Navigation/index.js","hooks/useLogout.js","lib/redux/selectors/posts.js","theme/assets/comment.js","theme/assets/like.js","lib/redux/selectors/auth.js","components/forms/elements/input.js","components/forms/CommentsForm/config.js","components/forms/CommentsForm/index.js","components/Post/index.js","hooks/useDeletePost.js","hooks/useLike.js","hooks/useUnlike.js","components/forms/Composer/config.js","components/forms/Composer/index.js","hooks/useCreatePost.js","components/Additionally/Loading.js","components/Posts/index.js","components/Profile/config.js","components/Profile/index.js","hooks/useUpdateProfile.js","components/RecentComments/index.js","components/PostComments/index.js","hooks/usePostDetails.js","pages/Feed/index.js","pages/ProfilePage/index.js","pages/PostCommentsPage/index.js","components/forms/SignUpForm/config.js","components/forms/SignUpForm/index.js","hooks/useSignUp.js","pages/SignUpPage/index.js","components/forms/LoginForm/config.js","components/forms/LoginForm/index.js","hooks/useLogin.js","pages/LoginPage/index.js","components/forms/NewPassword/index.js","pages/NewPasswordPage/index.js","App.tsx","hooks/useErrorMessage.js","lib/queryClient.js","index.tsx"],"names":["authTypes","Object","freeze","SET_TOKEN","SET_ERROR","RESET_ERROR","postTypes","SET_SELECTED_POST_ID","passwordTypes","UPDATE_PASSWORD","START_FETCHING","STOP_FETCHING","initialState","token","errorMessage","error","isPostOpen","postId","isFetching","rootReducer","combineReducers","auth","state","action","type","payload","posts","password","createLogger","duration","collapsed","colors","title","prevState","nextState","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","composeEnhancers","compose","middleware","thunk","store","createStore","applyMiddleware","Footer","className","Comment","props","author","body","created","relatedDate","formatDistance","Date","addSuffix","includeSeconds","name","ROOT_URL","process","FEED_URL","AUTH_URL","api","localStorage","getItem","async","userInfo","data","axios","post","headers","credentials","get","Authorization","logout","fetch","method","this","remove","like","unlike","hash","put","postHash","profile","updateProfile","profileInfo","JSON","stringify","updateAvatar","avatarFormData","passwordData","users","usePosts","query","useQuery","isFetched","refetch","useRecentComments","getComments","authActions","resetError","setError","message","setToken","postActions","setPostId","toastOptions","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","passwordActions","startFetching","stopFetching","updatePassword","updatePasswordAsync","dispatch","removeItem","setItem","toast","useProfile","useToken","retry","useDispatch","navigate","useNavigate","useEffect","status","Navigation","logOut","mutation","useMutation","onError","isSuccess","useLogOut","src","alt","to","onClick","mutate","getPostId","CommentIcon","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","LikeIcon","getToken","getErrorMessage","getPasswordState","Input","input","placeholder","register","tag","style","color","fontSize","text","defaultProps","schema","yup","shape","min","required","CommentsForm","useSelector","comment","recentComments","useComment","form","useForm","mode","resolver","yupResolver","onSubmit","handleSubmit","reset","formState","errors","Post","removePost","useDeletePost","useLike","useUnlike","selectedComment","hashAuthor","comments","likes","liked","filter","likelistJSX","map","mouseHover","setMouseHover","useState","commentsJSX","onMouseEnter","onMouseLeave","length","Composer","createPost","create","mutateAsync","Loading","Posts","postJSX","tooShortMessage","firstName","lastName","Profile","setName","RecentComments","commentJSX","PostComments","id","useParams","getPostById","usePostDetails","CommentJSX","replace","Feed","ProfilePage","PostCommentsPage","email","confirmPassword","oneOf","SignUpForm","signUp","user","signup","useSignUp","newUser","SignUpPage","LoginForm","login","response","useLogin","LoginPage","NewPassword","resetPassword","NewPasswordPage","Home","App","useErrorMessage","newestOnTop","transition","Slide","path","element","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","render","client","document","getElementById"],"mappings":"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","file":"static/js/main.6703e699.chunk.js","sourcesContent":["export const authTypes = Object.freeze({\n    SET_TOKEN:   'SET_TOKEN',\n    SET_ERROR:   'SET_ERROR',\n    RESET_ERROR: 'RESET_ERROR',\n});\n","export const postTypes = Object.freeze({\n    SET_SELECTED_POST_ID: 'SET_SELECTED_POST_ID',\n});\n","export const passwordTypes = Object.freeze({\n    UPDATE_PASSWORD: 'UPDATE_PASSWORD',\n    START_FETCHING:  'START_FETCHING',\n    STOP_FETCHING:   'STOP_FETCHING',\n});\n","import { authTypes } from '../types';\n\nconst initialState = {\n    token:        '',\n    errorMessage: '',\n    error:        false,\n};\n\nexport const authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case authTypes.SET_TOKEN: {\n            return {\n                ...state,\n                token:        action.payload,\n                error:        false,\n                errorMessage: '',\n            };\n        }\n\n        case authTypes.RESET_ERROR: {\n            return {\n                ...state,\n                error:        false,\n                errorMessage: '',\n            };\n        }\n\n        case authTypes.SET_ERROR: {\n            return {\n                ...state,\n                error:        true,\n                errorMessage: action.payload,\n            };\n        }\n\n        default: {\n            return state;\n        }\n    }\n};\n","import { postTypes } from '../types';\n\nconst initialState = {\n    isPostOpen: false,\n    postId:     '',\n};\n\nexport const postsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case postTypes.SET_SELECTED_POST_ID: {\n            return {\n                ...state,\n                postId: action.payload,\n            };\n        }\n\n        default: {\n            return state;\n        }\n    }\n};\n","import { passwordTypes } from '../types';\n\nexport const initialState = {\n    token:      '',\n    isFetching: false,\n};\n\nexport const passwordReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case passwordTypes.START_FETCHING: {\n            return {\n                ...state,\n                isFetching: true,\n            };\n        }\n        case passwordTypes.STOP_FETCHING: {\n            return {\n                ...state,\n                isFetching: false,\n            };\n        }\n        case passwordTypes.UPDATE_PASSWORD: {\n            return {\n                ...state,\n                isFetching: false,\n                token:      action?.payload,\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n};\n","import { combineReducers } from 'redux';\n\n// Reducers\nimport {\n    authReducer as auth,\n    postsReducer as posts,\n    passwordReducer as password,\n} from '../reducers';\n\nexport const rootReducer = combineReducers({\n    auth,\n    posts,\n    password,\n});\n","import { compose } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nexport const logger = createLogger({\n    duration:  true,\n    collapsed: true,\n    colors:    {\n        title: (action) => {\n            return action.error ? 'firebrick' : 'deepskyblue';\n        },\n        prevState: () => '#1C5FAF',\n        action:    () => '#149945',\n        nextState: () => '#A47104',\n        error:     () => '#ff0005',\n    },\n});\n\nconst developmentEnvironment = process.env.NODE_ENV === 'development';\nconst devtools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\nconst composeEnhancers = developmentEnvironment && devtools ? devtools : compose;\n\nconst middleware = [thunk];\n\nif (developmentEnvironment) {\n    middleware.push(logger);\n}\n\nexport { composeEnhancers, middleware };\n","import { createStore, applyMiddleware } from 'redux';\n\n// Instruments\nimport { rootReducer } from './rootReducer';\nimport {\n    composeEnhancers,\n    middleware,\n} from './middleware';\n\nexport const store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(...middleware)),\n);\n\n","export const Footer = () => {\n    return (\n        <footer className = 'footer'>\n            <p>© Surzhenko P 2022</p>\n        </footer>\n    );\n};\n","import { formatDistance } from 'date-fns';\n\nexport const Comment = (props) => {\n    const { author, body, created } = props;\n\n    const relatedDate = formatDistance(\n        new Date(created),\n        new Date(), {\n            addSuffix:      true,\n            includeSeconds: true,\n        },\n    );\n\n    return (\n        <ul>\n            <li className = 'commentBody'>\n                <p>\n                    { author.name }\n                    <span>{ relatedDate }</span>\n                </p>\n                <p>{ body }</p>\n            </li>\n        </ul>\n    );\n};\n","// Config\nexport const ROOT_URL = process.env.REACT_APP_API_URL;\n\nexport const FEED_URL = `${ROOT_URL}/rtx/api/feed`;\nexport const AUTH_URL = `${ROOT_URL}/rtx/api/live`;\n","// Core\nimport axios from 'axios';\n// import { ILogin, ISignUpWithToken } from '../types';\n\n// Instruments\nimport { AUTH_URL, FEED_URL } from './config';\n\nexport const api = {\n    get token() {\n        return localStorage.getItem('token');\n    },\n    auth: {\n        async signup(userInfo) {\n            const { data } = await axios.post(`${AUTH_URL}/register`,\n                userInfo,\n                {\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                });\n\n            return data;\n        },\n        async login(credentials) {\n            const { data } = await axios.post(`${AUTH_URL}/login`,\n                credentials,\n                {\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                });\n\n            return data;\n        },\n        async auth() {\n            const { data } = await axios.get(`${AUTH_URL}/auth`, {\n                headers: {\n                    Authorization: `Bearer ${api.token}`,\n                },\n            });\n\n            return data;\n        },\n        logout() {\n            return fetch(`${AUTH_URL}/logout`, {\n                method:  'GET',\n                headers: {\n                    Authorization: `Bearer ${api.token}`,\n                },\n            });\n        },\n    },\n    posts: {\n        async fetch() {\n            const { data } = await axios.get(FEED_URL, {\n                headers: {\n                    Authorization: this.token,\n                },\n            });\n\n            return data;\n        },\n        async create(post) {\n            const { data } = await axios.post(FEED_URL,\n                post,\n                {\n                    headers: {\n                        Authorization: `Bearer ${api.token}`,\n                    },\n                });\n\n            return data;\n        },\n        remove(postId) {\n            return fetch(`${FEED_URL}/${postId}`, {\n                method:  'DELETE',\n                headers: {\n                    Authorization: `Bearer ${api.token}`,\n                },\n            });\n        },\n        like(postId) {\n            return fetch(`${FEED_URL}/${postId}/like`, {\n                method:  'PUT',\n                headers: {\n                    Authorization: `Bearer ${api.token}`,\n                },\n            });\n        },\n        unlike(postId) {\n            return fetch(`${FEED_URL}/${postId}/unlike`, {\n                method:  'PUT',\n                headers: {\n                    Authorization: `Bearer ${api.token}`,\n                },\n            });\n        },\n        async comment({ hash, body }) {\n            const { data } = await axios.put(`${FEED_URL}/${hash}/comment`,\n                { body },\n                {\n                    headers: {\n                        Authorization: `Bearer ${api.token}`,\n                    },\n                });\n\n            return data;\n        },\n        async getComments() {\n            const { data } = await axios.get(`${FEED_URL}/comments`);\n\n            return data;\n        },\n        async getPostById(postHash) {\n            const { data } = await axios.get(`${FEED_URL}/${postHash}`);\n\n            return data;\n        },\n    },\n    profile: {\n        async fetch() {\n            const { data: profile } = await axios.get(`${AUTH_URL}/profile`, {\n                headers: {\n                    Authorization: `Bearer ${api.token}`,\n                },\n            });\n\n            return profile.data;\n        },\n        updateProfile(profileInfo) {\n            return fetch(`${AUTH_URL}/profile`, {\n                method:  'PUT',\n                headers: {\n                    Authorization:  `Bearer ${api.token}`,\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(profileInfo),\n            });\n        },\n        updateAvatar(avatarFormData) {\n            return fetch(`${AUTH_URL}/image`, {\n                method:  'POST',\n                headers: {\n                    Authorization: this.token,\n                },\n                body: avatarFormData,\n            });\n        },\n        async updatePassword(passwordData) {\n            const { data } = await axios.post(\n                `${AUTH_URL}/reset-password`,\n                passwordData,\n                {\n                    headers: {\n                        Authorization: `Bearer ${api.token}`,\n                    },\n                },\n            );\n\n            return data;\n        },\n    },\n    users: {\n        fetch() {\n            return fetch(`${AUTH_URL}/users`, {\n                method:  'GET',\n                headers: {\n                    Authorization: this.token,\n                },\n            });\n        },\n    },\n};\n","import { useQuery }  from 'react-query';\n\nimport { api }  from '../api';\n\nexport const usePosts = () => {\n    const query = useQuery('posts', api.posts.fetch);\n    const { data, isFetched, refetch } = query;\n\n    return {\n        data: data?.data || [],\n        isFetched,\n        refetch,\n    };\n};\n","import { useQuery }  from 'react-query';\n\nimport { api }  from '../api';\n\nexport const useRecentComments = () => {\n    const query = useQuery('recentComments', api.posts.getComments);\n    const { data, isFetched, refetch } = query;\n\n    return {\n        data: data?.data || [],\n        isFetched,\n        refetch,\n    };\n};\n","import { authTypes } from '../types';\n\nexport const authActions = Object.freeze({\n    resetError: () => {\n        return {\n            type: authTypes.RESET_ERROR,\n        };\n    },\n\n    setError: (message) => {\n        return {\n            type:    authTypes.SET_ERROR,\n            error:   true,\n            payload: message,\n        };\n    },\n\n    setToken: (token) => {\n        return {\n            type:    authTypes.SET_TOKEN,\n            payload: token,\n        };\n    },\n});\n\n","import { postTypes } from '../types';\n\nexport const postActions = Object.freeze({\n    setPostId: (postId) => {\n        return {\n            type:    postTypes.SET_SELECTED_POST_ID,\n            payload: postId,\n        };\n    },\n});\n\n","export const toastOptions = Object.freeze({\n    position:        'top-right',\n    autoClose:       7000,\n    hideProgressBar: false,\n    closeOnClick:    true,\n    pauseOnHover:    true,\n    draggable:       true,\n    progress:        undefined,\n});\n","import { toast } from 'react-toastify';\nimport { passwordTypes } from '../types/password';\nimport { api }  from '../../../api';\nimport { authActions } from './auth';\nimport { toastOptions } from '../../../constants/toastOptions';\n\nexport const passwordActions = Object.freeze({\n    startFetching: () => {\n        return {\n            type: passwordTypes.START_FETCHING,\n        };\n    },\n    stopFetching: () => {\n        return {\n            type: passwordTypes.STOP_FETCHING,\n        };\n    },\n    updatePassword: (token) => {\n        return {\n            type:    passwordTypes.UPDATE_PASSWORD,\n            payload: token,\n        };\n    },\n    updatePasswordAsync: (passwordData) => async (dispatch) => {\n        if (!passwordData) {\n            return null;\n        }\n        try {\n            dispatch(passwordActions.startFetching());\n            const token = await api.profile.updatePassword(passwordData);\n            localStorage.removeItem('token');\n            localStorage.setItem('token', token?.data);\n            dispatch(passwordActions.updatePassword(token?.data));\n            toast('Password has been change', toastOptions);\n        } catch (error) {\n            dispatch(authActions.setError(error.message));\n        } finally {\n            dispatch(passwordActions.stopFetching());\n        }\n    },\n});\n","import { useQuery } from 'react-query';\nimport { api } from '../api';\n\n\nexport const useProfile = () => {\n    const query = useQuery('profile', api.profile.fetch);\n    const { data, isFetched, refetch } = query;\n\n    return {\n        data,\n        isFetched,\n        refetch,\n    };\n};\n","import { useEffect } from 'react';\nimport { useQuery } from 'react-query';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { api } from '../api';\nimport { authActions } from '../lib/redux/actions';\n\nexport const useToken = () => {\n    const query = useQuery('token', api.auth.auth, {\n        retry: false,\n    });\n\n    const { data, error } = query;\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        if (data && data.status === 'success') {\n            dispatch(authActions.setToken(data));\n        }\n    }, [data]);\n\n    useEffect(() => {\n        if (error?.message) {\n            dispatch(authActions.setError(error.message));\n            navigate('/login');\n        }\n    }, [error]);\n};\n","// core\nimport { useEffect } from 'react';\nimport { useMutation } from 'react-query';\nimport { useDispatch } from 'react-redux';\nimport { api } from '../api';\nimport { authActions } from '../lib/redux/actions';\nimport { usePosts } from './usePosts';\nimport { useRecentComments } from './useRecentComments';\n\nexport const useComment = () => {\n    const dispatch = useDispatch();\n    const recentComments = useRecentComments();\n    const posts = usePosts();\n    const mutation = useMutation(({ hash, body }) => {\n        return api.posts.comment({ hash, ...body });\n    }, {\n        onError: (error) => {\n            dispatch(authActions.setError(error?.message));\n        },\n    });\n\n    useEffect(() => {\n        if (mutation.isSuccess) {\n            recentComments.refetch();\n            posts.refetch();\n        }\n    }, [mutation.isSuccess]);\n\n    return mutation;\n};\n","// core\nimport { NavLink } from 'react-router-dom';\nimport { useLogOut, useProfile } from '../../hooks';\n\n\nexport const Navigation = () => {\n    const profile = useProfile();\n    const logOut = useLogOut();\n\n    return (\n        <div>\n            <div className = 'navigation-profile'>\n                <div className = 'profile-wrapper'>\n                    <img\n                        src = 'https://placeimg.com/256/256/animals'\n                        alt = ''\n                        className = 'navigation-avatar'></img>\n                    <div className = 'user-status'>\n                        <div className = 'status online'>\n                            <span></span>\n                        </div>\n                    </div>\n                </div>\n                { profile.data?.name }\n            </div>\n            <NavLink to = '/profile' className = 'navigation-item'>\n                Profile\n            </NavLink>\n            <NavLink to = '/feed' className = 'navigation-item'>\n                Wall\n            </NavLink>\n            <button className = 'logout' onClick = { () => logOut.mutate() }>\n                Log out\n            </button>\n        </div>\n    );\n};\n","import { useEffect } from 'react';\nimport { useMutation } from 'react-query';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { api } from '../api';\nimport { authActions } from '../lib/redux/actions';\n\nexport function useLogOut() {\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const mutation = useMutation(() => api.auth.logout(), {\n        onError: (error) => {\n            dispatch(authActions.setError(error?.message));\n        },\n    });\n\n    useEffect(() => {\n        if (mutation.isSuccess) {\n            localStorage.removeItem('token');\n            navigate('/login');\n        }\n    }, [mutation.isSuccess]);\n\n    return mutation;\n}\n\n","export const getPostId = (state) => {\n    return state.posts.postId;\n};\n\n","export const CommentIcon =  ({ className }) => {\n    return (\n        <>\n            <svg\n                className = { className }\n                width = '24' height = '24'\n                viewBox = '0 0 24 24' fill = 'none'\n                xmlns = 'http://www.w3.org/2000/svg'>\n                <path\n                    d = 'M14.0442 2.99199L14.1869 2.99234C18.0754 3.06553 21.0906 6.12406 21.096 10.03V10.045C21.0933 12.1512 20.0647 14.3074 18.3184 15.7855C17.5518 16.434 15.6384 17.7416 13.838 18.9351C12.0679 20.1086 10.4636 21.1349 10.3152 21.2294C10.3149 21.2284 10.3146 21.2274 10.3143 21.2264C10.3131 21.2222 10.3121 21.2183 10.3114 21.2147L10.311 21.2129V17.404V16.6822L9.58973 16.6545C5.67502 16.5045 2.84601 13.6916 2.84601 10.034C2.84601 6.07302 5.93641 2.98199 9.89601 2.98199H9.89711H9.89801L14.0442 2.99199Z' stroke = '#616770'\n                    strokeWidth = '1.5' />\n            </svg>\n\n        </>\n    );\n};\n","export const LikeIcon =  ({ className }) => {\n    return (\n        <>\n            <svg\n                className = { className }\n                width = '24' height = '24'\n                viewBox = '0 0 24 24' fill = 'none'\n                xmlns = 'http://www.w3.org/2000/svg'>\n                <path\n                    d = 'M12.8785 20.6337C12.475 20.8136 12.1835 20.8814 12.0031 20.886H12H11.9535C11.7712 20.873 11.4932 20.8025 11.1187 20.6354C10.7213 20.4581 10.2595 20.1922 9.75608 19.8424C8.74949 19.1432 7.62035 18.1397 6.56267 16.9366C4.42616 14.5063 2.70001 11.4004 2.70001 8.478C2.70001 5.78296 4.93307 3.474 7.35301 3.474C9.27104 3.474 10.6155 4.8003 11.3873 5.88801L11.9992 6.75035L12.6108 5.88781C13.3807 4.80204 14.7252 3.474 16.644 3.474C19.0659 3.474 21.298 5.78287 21.298 8.479C21.298 11.4003 19.5717 14.5056 17.4349 16.9356C16.3771 18.1386 15.2479 19.1419 14.2412 19.841C13.7377 20.1906 13.2759 20.4565 12.8785 20.6337Z' stroke = '#616770'\n                    strokeWidth = '1.5' />\n            </svg>\n        </>\n    );\n};\n","export const getToken = (state) => {\n    return state.auth.token;\n};\n\nexport const getErrorMessage = (state) => {\n    return state.auth.errorMessage;\n};\n\nexport const getPasswordState = (state) => {\n    return state.password;\n};\n","export const Input = (props) => {\n    let input = (\n        <input\n            placeholder = { props.placeholder }\n            type = { props.type } { ...props.register } />\n    );\n\n    if (props.tag === 'textarea') {\n        input = (\n            <textarea\n                placeholder = { props.placeholder }\n                { ...props.register } />\n        );\n    }\n\n    return (\n        <label>\n            { input }\n            <div>\n                <span\n                    style = { {\n                        color: 'red', fontSize: '10px', text: 'left',\n                    } } className = 'error-message'>{ props.error?.message }</span>\n            </div>\n        </label>\n    );\n};\n\nInput.defaultProps = {\n    type: 'text',\n    tag:  'input',\n};\n","import * as yup from 'yup';\n\nexport const schema = yup.object().shape({\n    body: yup.string()\n        .min(5, 'text must be longer')\n        .required('write text'),\n});\n","import { useSelector } from 'react-redux';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm } from 'react-hook-form';\n\nimport { useComment } from '../../../hooks';\nimport { getPostId } from '../../../lib/redux/selectors';\nimport { Input } from '../elements/input';\nimport { schema }  from './config';\n\n\nexport const CommentsForm = () => {\n    const hash = useSelector(getPostId);\n    const comment = useComment();\n\n    const form = useForm({\n        mode:     'onTouched',\n        resolver: yupResolver(schema),\n    });\n\n    const onSubmit = form.handleSubmit(async (body) => {\n        await comment.mutate({ hash, body });\n        form.reset();\n    });\n\n    return (\n        <>\n            <form className = 'commentForm' onSubmit = { onSubmit }>\n                <img\n                    src = 'https://placeimg.com/256/256/animals' alt = 'avatar'\n                    className = 'comment-avatar'></img>\n                <label>\n                    <div>\n                        <span className = 'error-message'></span>\n                    </div>\n                    <Input\n                        placeholder = 'Comments...'\n                        type = 'text'\n                        register = { form.register('body') }\n                        error = { form.formState.errors.body } />\n                </label>\n                <button type = 'submit'>Comment</button>\n            </form>\n            <hr className = 'separator'></hr>\n        </>\n    );\n};\n","// Core\nimport { formatDistance } from 'date-fns';\nimport { useState } from 'react';\nimport { useDispatch, useSelector }  from 'react-redux';\nimport {\n    useDeletePost, useLike, useProfile, useUnlike,\n} from '../../hooks';\nimport { postActions } from '../../lib/redux/actions/posts';\nimport { getPostId } from '../../lib/redux/selectors/posts';\n\n// Components\nimport { CommentIcon } from '../../theme/assets/comment';\nimport { LikeIcon } from '../../theme/assets/like';\nimport { Comment } from '../Comment';\nimport { CommentsForm } from '../forms/CommentsForm';\n\nexport const Post = (props) => {\n    const removePost = useDeletePost();\n    const like = useLike();\n    const unlike = useUnlike();\n    const dispatch = useDispatch();\n    const selectedComment = useSelector(getPostId);\n    const { data:{ hash: hashAuthor, name } } = useProfile();\n    const {\n        body, author, created, hash, comments, likes,\n    } = props;\n\n    const relatedDate = formatDistance(\n        new Date(created),\n        new Date(), {\n            addSuffix:      true,\n            includeSeconds: true,\n        },\n    );\n\n    const handleClick = () => {\n        dispatch(postActions.setPostId(props.hash === selectedComment ? '' : props.hash));\n    };\n\n    const liked = likes.filter((post) => post.name === name);\n    const likePost = () => {\n        // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n        liked.length ? unlike.mutate(hash) : like.mutate(hash);\n    };\n\n    const likelistJSX = likes.map((post) => (\n        <li key = { post.hash }> { post.name }</li>\n    ));\n\n    const [mouseHover, setMouseHover] = useState(false);\n\n    const handleMouseHover = () => {\n        setMouseHover(true);\n    };\n\n    const handleMouseLeave = () => {\n        setMouseHover(false);\n    };\n\n    const commentsJSX = comments.map((comment) => (\n        <Comment key = { comment.hash } { ...comment } />\n    ));\n\n    return (\n        <section className = 'post'>\n            <img src = 'https://placeimg.com/256/256/animals' alt = 'avatar'></img>\n            { author.hash === hashAuthor ? <span className = 'cross' onClick = { () => removePost.mutate(hash) }></span> : '' }\n            <a>{ author.name }</a>\n            <time> { relatedDate }</time>\n            <p>{ body }</p>\n            <div className = 'reaction-controls'>\n                <section className = 'like'>\n                    <div onMouseEnter = { handleMouseHover } onMouseLeave = { handleMouseLeave }>\n                        { mouseHover && likes.length !== 0 && <ul> { likelistJSX } </ul>  }\n                        <span>{ likes.length }</span>\n                    </div>\n                    <span onClick = { likePost } className = { `icon ${liked.length ? 'liked' : ''} ` }>\n                        <LikeIcon />\n                        Like\n                    </span>\n                </section>\n                <span className = 'comment'  onClick = { handleClick }>\n                    <CommentIcon className = { 'comment-icon' } />\n                    { `${comments.length}  comment${comments.length > 0 ? '' : 's'}` }\n                </span>\n            </div>\n            { selectedComment === hash && <><CommentsForm /> { commentsJSX }</> }\n        </section>\n    );\n};\n","import { useEffect } from 'react';\nimport { useMutation } from 'react-query';\nimport { useDispatch } from 'react-redux';\nimport { api } from '../api';\nimport { authActions } from '../lib/redux/actions';\nimport { usePosts } from './usePosts';\n\nexport function useDeletePost() {\n    const dispatch = useDispatch();\n    const posts = usePosts();\n    const mutation = useMutation((hash) => {\n        return api.posts.remove(hash);\n    }, {\n        onError: (error) => {\n            dispatch(authActions.setError(error?.message));\n        },\n    });\n\n    useEffect(() => {\n        if (mutation.isSuccess) {\n            posts.refetch();\n        }\n    }, [mutation.isSuccess]);\n\n    return mutation;\n}\n","import { useEffect } from 'react';\nimport { useMutation } from 'react-query';\nimport { useDispatch } from 'react-redux';\nimport { api } from '../api';\nimport { authActions } from '../lib/redux/actions';\nimport { usePosts } from './usePosts';\n\n\nexport const useLike = () => {\n    const dispatch = useDispatch();\n    const posts = usePosts();\n    const mutation = useMutation((hash) => {\n        return api.posts.like(hash);\n    }, {\n        onError: (error) => {\n            dispatch(authActions.setError(error?.message));\n        },\n    });\n\n    useEffect(() => {\n        if (mutation.isSuccess) {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            posts.refetch();\n        }\n    }, [mutation.isSuccess]);\n\n    return mutation;\n};\n\n","import { useEffect } from 'react';\nimport { useMutation } from 'react-query';\nimport { useDispatch } from 'react-redux';\nimport { api } from '../api';\nimport { authActions } from '../lib/redux/actions';\nimport { usePosts } from './usePosts';\n\n\nexport const useUnlike = () => {\n    const dispatch = useDispatch();\n    const posts = usePosts();\n    const mutation = useMutation((hash) => {\n        return api.posts.unlike(hash);\n    }, {\n        onError: (error) => {\n            dispatch(authActions.setError(error?.message));\n        },\n    });\n\n    useEffect(() => {\n        if (mutation.isSuccess) {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            posts.refetch();\n        }\n    }, [mutation.isSuccess]);\n\n    return mutation;\n};\n\n","import * as yup from 'yup';\n\nexport const schema = yup.object().shape({\n    body: yup.string()\n        .min(3, 'text must be longer')\n        .required('write text'),\n});\n","import { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\nimport { useCreatePost, usePosts } from '../../../hooks';\nimport { schema }  from './config';\nimport { Input } from '../elements/input';\n\nexport const Composer = () => {\n    const createPost = useCreatePost();\n    const posts = usePosts();\n\n    const form = useForm({\n        mode:     'onTouched',\n        resolver: yupResolver(schema),\n    });\n\n    const onSubmit = form.handleSubmit(async (body) => {\n        await createPost.mutateAsync(body);\n        posts.refetch();\n        form.reset();\n    });\n\n    return (\n        <section className = 'composer'>\n            <img src = 'https://placeimg.com/256/256/animals' alt = 'avatar'></img>\n            <form onSubmit = { onSubmit }>\n                <label>\n                    <div>\n                        <span className = 'error-message'></span>\n                    </div>\n                    <Input\n                        placeholder = \"What's on your mind, Chuck Norris?\"\n                        error = { form.formState.errors.body }\n                        register = { form.register('body') }\n                        tag = 'textarea' />\n                </label>\n                <button type = 'submit' >post</button>\n            </form>\n        </section>\n    );\n};\n","// core\nimport { useMutation } from 'react-query';\nimport { api } from '../api';\n\nexport const useCreatePost = () => {\n    const mutation = useMutation((body) => {\n        return api.posts.create(body);\n    });\n\n    return mutation;\n};\n","export const Loading = () => {\n    return <span style = { { color: '#fff', fontSize: '25px' } }>Loading...</span>;\n};\n","// Components\nimport { useEffect } from 'react';\nimport { Composer } from '../forms/Composer';\nimport { Post } from '../Post';\nimport { Loading }  from '../Additionally/Loading';\n\n// hooks\nimport { usePosts }  from '../../hooks';\n\nexport const Posts = () => {\n    const { data, isFetched, refetch } = usePosts();\n    const postJSX = data.map((post) => (\n        <Post key = { post.hash } { ...post } />\n    ));\n\n    useEffect(() => {\n        refetch();\n    }, [data]);\n\n\n    return (\n        <div className = 'posts'>\n            <h1 className = 'title'>Wall</h1>\n            <Composer />\n            <div className = 'posts-container'>\n                { isFetched ? postJSX : <Loading /> }\n            </div>\n        </div>\n    );\n};\n\n","import * as yup from 'yup';\n\n// eslint-disable-next-line no-template-curly-in-string\nconst tooShortMessage = 'min length - ${min}';\n\nexport const schema = yup.object().shape({\n    firstName: yup.string()\n        .min(3, tooShortMessage)\n        .required('enter first name'),\n    lastName: yup.string()\n        .min(3, tooShortMessage)\n        .required('enter last name'),\n});\n","// core\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Link } from 'react-router-dom';\n// hooks\nimport { useProfile, useUpdateProfile } from '../../hooks';\nimport { Input } from '../forms/elements/input';\n\n// other\nimport { schema }  from './config';\n\nexport const Profile = () => {\n    const profile = useProfile();\n    const updateProfile = useUpdateProfile();\n\n    const [name, setName] = useState();\n\n    useEffect(() => {\n        if (profile.isFetched) {\n            setName(profile.data?.name);\n        }\n    }, [profile]);\n\n    const form = useForm({\n        mode:     'onTouched',\n        resolver: yupResolver(schema),\n    });\n\n    const onSubmit = form.handleSubmit(async (profileInfo) => {\n        await updateProfile.mutateAsync(profileInfo);\n        profile.refetch();\n        form.reset();\n    });\n\n    return (\n        <form onSubmit = { onSubmit } className = 'form'>\n            <div className = 'wrapper'>\n                <div>\n                    <h1>{ `Hi, ${name}` }</h1>\n                    <img src = 'https://placeimg.com/256/256/animals' alt = 'avatar' />\n                    <Input\n                        placeholder = 'Name' type = 'text'\n                        error = { form.formState.errors.firstName }\n                        register = { form.register('firstName') } />\n                    <Input\n                        placeholder = 'Last name' type = 'text'\n                        error = { form.formState.errors.lastName }\n                        register = { form.register('lastName') } />\n                    <button className = 'loginSubmit' type = 'submit'>Update profile</button>\n                </div>\n                <Link to = '/new-password'>Change password</Link>\n            </div>\n        </form>\n    );\n};\n","// core\nimport { useMutation } from 'react-query';\nimport { api } from '../api';\n\nexport const useUpdateProfile = () => {\n    const mutation = useMutation((profileInfo) => {\n        return api.profile.updateProfile(profileInfo);\n    });\n\n    return mutation;\n};\n","// core\nimport { formatDistance } from 'date-fns';\nimport { Link }  from 'react-router-dom';\n\n// hooks\nimport { useRecentComments }  from '../../hooks';\n\n// components\nimport { Loading }  from '../Additionally/Loading';\n\nexport const Comment = (props) => {\n    const {\n        body, author, created, post,\n    } = props;\n\n    const relatedDate = formatDistance(\n        new Date(created),\n        new Date(), {\n            addSuffix:      true,\n            includeSeconds: true,\n        },\n    );\n\n    return (\n        <div className = 'comment'>\n            <p className = 'name'>{ author.name }</p>\n            <time>{ relatedDate }</time>\n            <p className = 'body'>{ body }</p>\n            <Link to = { post.hash }>More comments</Link>\n        </div>\n    );\n};\n\n\nexport const RecentComments = () => {\n    const { data, isFetched } = useRecentComments();\n\n    const commentJSX = data.map((comment) => (\n        <Comment key = { comment.hash } { ...comment } />\n    ));\n\n    return (\n        <div className = 'most-recent-comments'>\n            <h1 className = 'title'>Recent comments</h1>\n            <section>\n                { isFetched ? commentJSX : <Loading /> }\n            </section>\n        </div>\n    );\n};\n","// core\nimport { formatDistance } from 'date-fns';\nimport { useParams, useNavigate }  from 'react-router-dom';\nimport { useEffect } from 'react';\n\n// hooks\nimport { usePostDetails }  from '../../hooks';\n\n// components\nimport { Loading }  from '../Additionally/Loading';\n\nconst Comment = (props) => {\n    const { body, created, author } = props;\n    const relatedDate = formatDistance(\n        new Date(created),\n        new Date(), {\n            addSuffix:      true,\n            includeSeconds: true,\n        },\n    );\n\n    return (\n        <div className = 'comment'>\n            <p>{ author.name }</p>\n            <time>{ relatedDate }</time>\n            <p>{ body }</p>\n        </div>\n    );\n};\n\nexport const PostComments = () => {\n    const { id } = useParams();\n    const navigate = useNavigate();\n\n    const {\n        data :{\n            body, created, hash, comments, author,\n        }, isFetched,\n    } = usePostDetails(id);\n\n    const CommentJSX = comments?.map((comment) => (\n        <Comment key = { comment.hash } { ...comment } />\n    ));\n\n    const relatedDate = formatDistance(\n        new Date(created ?? null),\n        new Date(), {\n            addSuffix:      true,\n            includeSeconds: true,\n        },\n    );\n\n    useEffect(() => {\n        if (!hash && isFetched) {\n            navigate('/feed', { replace: true });\n        }\n    }, [hash, isFetched]);\n\n    return (\n        <section>\n            <div className = 'comment'>\n                <p className = 'name'>{ author?.name || <Loading /> }</p>\n                <time>{ relatedDate }</time>\n                <p className = 'body'> { body } </p>\n                <p className = 'subtitle'>Recent comments</p>\n                { isFetched ? CommentJSX : <Loading /> }\n            </div>\n        </section>\n    );\n};\n","// core\nimport { useQuery }  from 'react-query';\n\nimport { api }  from '../api';\n\n\nexport const usePostDetails = (postHash) => {\n    const { data, isFetched } = useQuery(['postById', postHash], () => api.posts.getPostById(postHash), { retry: false });\n\n    return {\n        data: data?.data || {},\n        isFetched,\n    };\n};\n","// components\nimport { Posts, RecentComments } from '../../components';\nimport { useToken } from '../../hooks';\n\nexport const Feed = () => {\n    useToken();\n\n    return (\n        <>\n            <Posts />\n            <RecentComments />\n        </>\n    );\n};\n","// components\nimport { Profile }  from '../../components';\nimport { useToken } from '../../hooks';\n\nexport const ProfilePage = () => {\n    useToken();\n\n    return (\n        <Profile />\n    );\n};\n","// core\nimport { Link }  from 'react-router-dom';\n\n// components\nimport { PostComments }  from '../../components';\nimport { useToken } from '../../hooks';\n\nexport const PostCommentsPage = () => {\n    useToken();\n\n    return (\n        <div className = 'wrapper'>\n            <Link to = '/feed' className = 'link-back'>\n                <div className = 'arrow'></div>\n            back\n            </Link>\n            <h1 className = 'title'>Post comments</h1>\n            <PostComments />\n        </div>\n    );\n};\n","import * as yup from 'yup';\n\n// eslint-disable-next-line no-template-curly-in-string\nconst tooShortMessage = 'min length - ${min}';\n\n\nexport const schema = yup.object().shape({\n    name: yup.string()\n        .min(2, tooShortMessage)\n        .required('*'),\n    email: yup.string()\n        .email('please enter correct email')\n        .required('enter email'),\n    password: yup.string()\n        .min(5, tooShortMessage)\n        .required('*'),\n    confirmPassword: yup.string()\n        .oneOf([yup.ref('password')], 'password must match')\n        .required('please confirm password'),\n});\n","// Core\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { Link } from 'react-router-dom';\n\n// hooks\nimport { useSignUp } from '../../../hooks';\n\n// other\nimport { schema } from './config';\nimport { Input } from '../elements/input';\n\nexport const SignUpForm = () => {\n    const signUp = useSignUp();\n\n    const form = useForm({\n        mode:     'onTouched',\n        resolver: yupResolver(schema),\n    });\n\n    const onSubmit = form.handleSubmit(async (data) => {\n        const { confirmPassword, ...newUser } = data;\n        await signUp.mutateAsync(newUser);\n        form.reset();\n    });\n\n    return (\n        <form onSubmit = { onSubmit } className = 'form centered'>\n            <div className = 'wrapper centered'>\n                <div className = 'logo'></div>\n                <div>\n                    <div>\n                        <Input\n                            placeholder = 'Name'\n                            error = { form.formState.errors.name }\n                            register = { form.register('name') } />\n                        <Input\n                            placeholder = 'Email' type = 'email'\n                            error = { form.formState.errors.email }\n                            register = { form.register('email') } />\n                        <Input\n                            placeholder = 'Password' type = 'password'\n                            error = { form.formState.errors.password }\n                            register = { form.register('password') } />\n                        <Input\n                            placeholder = 'Password' type = 'password'\n                            error = { form.formState.errors.confirmPassword }\n                            register = { form.register('confirmPassword') } />\n                        <button\n                            className = 'signupSubmit' type = 'submit'>Create account</button>\n                    </div>\n                </div>\n                <p className = 'options'>Have account?<Link to = '/login'>Log in</Link></p>\n            </div>\n        </form>\n    );\n};\n","import { useEffect } from 'react';\nimport { useMutation } from 'react-query';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { api } from '../api';\nimport { authActions } from '../lib/redux/actions';\n\nexport const useSignUp = () => {\n    const dispatch = useDispatch();\n\n    const navigate = useNavigate();\n    const mutation = useMutation((user) => {\n        return api.auth.signup(user);\n    });\n\n    useEffect(() => {\n        if (mutation.isSuccess) {\n            const token = mutation.data?.data;\n            dispatch(authActions.setToken(token));\n            localStorage.setItem('token', token);\n            navigate('/feed');\n        }\n    }, [mutation.isSuccess]);\n\n    return mutation;\n};\n","import { SignUpForm } from '../../components/forms/SignUpForm';\n\nexport const SignUpPage = () => {\n    return (\n        <SignUpForm />\n    );\n};\n","import * as yup from 'yup';\n\n// eslint-disable-next-line no-template-curly-in-string\nconst tooShortMessage = 'min length - ${min}';\n\n\nexport const schema = yup.object().shape({\n    email: yup.string()\n        .email('please enter correct email')\n        .required('enter email'),\n    password: yup.string()\n        .min(5, tooShortMessage)\n        .required('*'),\n});\n","/* eslint-disable react/no-unescaped-entities */\n// core\nimport { Link } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\n// components\nimport { Input } from '../elements/input';\n\n// other\nimport { schema } from './config';\nimport { useLogin } from '../../../hooks';\n\nexport const LoginForm = () => {\n    const login = useLogin();\n\n    const form = useForm({\n        mode:     'onTouched',\n        resolver: yupResolver(schema),\n    });\n\n    const onSubmit = form.handleSubmit(async (credentials) => {\n        await login.mutateAsync(credentials);\n        form.reset();\n    });\n\n    return (\n        <form onSubmit = { onSubmit } className = 'form centered'>\n            <div className = 'wrapper centered'>\n                <div className = 'logo'></div>\n                <div>\n                    <Input\n                        placeholder = 'Email' type = 'email'\n                        error = { form.formState.errors.email }\n                        register = { form.register('email') } />\n                    <Input\n                        placeholder = 'Password' type = 'password'\n                        error = { form.formState.errors.password }\n                        register = { form.register('password') } />\n                    <button\n                        className = 'loginSubmit'\n                        type = 'submit'>Войти</button>\n                </div>\n                <p className = 'options'>Don't have an account? <Link to = '/signup'>Sign up</Link></p>\n            </div>\n        </form>\n    );\n};\n","import { useEffect } from 'react';\nimport { useMutation } from 'react-query';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { api } from '../api';\nimport { authActions } from '../lib/redux/actions';\n\nexport const useLogin = () => {\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const mutation = useMutation((credentials) => {\n        return api.auth.login(credentials);\n    }, {\n        onError(error) {\n            const { response } = error;\n\n            if (response?.status === 401) {\n                dispatch(authActions.setError('Invalid login or password'));\n            } else {\n                dispatch(authActions.setError('request error'));\n            }\n        },\n    });\n\n    useEffect(() => {\n        if (mutation.isSuccess) {\n            const data = mutation.data?.data;\n            dispatch(authActions.setToken(data));\n            localStorage.setItem('token', data);\n            navigate('/feed');\n        }\n    }, [mutation.isSuccess]);\n\n    return mutation;\n};\n","import { LoginForm } from '../../components/forms/LoginForm';\n\nexport const LoginPage = () => {\n    return (\n        <LoginForm />\n    );\n};\n","import { Link }  from 'react-router-dom';\nimport { useDispatch, useSelector }  from 'react-redux';\nimport { useForm }  from 'react-hook-form';\nimport { useEffect } from 'react';\nimport { getPasswordState, getToken } from '../../../lib/redux/selectors/auth';\nimport { authActions, passwordActions } from '../../../lib/redux/actions';\n\nexport const NewPassword = () => {\n    const dispatch = useDispatch();\n    const token = useSelector(getToken);\n    const resetPassword = useSelector(getPasswordState);\n\n    const form = useForm({\n        mode: 'onTouched',\n    });\n\n    useEffect(() => {\n        if (resetPassword.token !== token) {\n            dispatch(authActions.setToken(resetPassword.token || token));\n        }\n    }, [resetPassword.token]);\n\n    const handleSubmit = form.handleSubmit(async (passwordData) => {\n        await dispatch(passwordActions.updatePasswordAsync(passwordData));\n        form.reset();\n    });\n\n    return (\n        <form className = 'form' onSubmit = { handleSubmit }>\n            <div className = 'wrapper'>\n                <div>\n                    <h1>Change password</h1>\n                    <label>\n                        <div>\n                            <span className = 'error-message'></span>\n                        </div>\n                        <input\n                            placeholder = 'old password' name = 'oldPassword'\n                            type = 'password'\n                            { ...form.register('oldPassword') } />\n                    </label>\n                    <label>\n                        <div>\n                            <span className = 'error-message'></span>\n                        </div>\n                        <input\n                            placeholder = 'new password' name = 'newPassword'\n                            type = 'password'\n                            { ...form.register('newPassword') } />\n                    </label>\n                    <button className = 'loginSubmit' type = 'submit'>Change password</button>\n                </div>\n                <Link to = '/profile'>Back</Link>\n            </div>\n        </form>\n    );\n};\n","import { NewPassword } from '../../components/forms/NewPassword';\nimport { useToken } from '../../hooks';\n\nexport const NewPasswordPage = () => {\n    useToken();\n\n    return (\n        <NewPassword />\n    );\n};\n","// Core\nimport {\n    Routes, Route, Outlet, Navigate,\n}  from 'react-router-dom';\nimport { ToastContainer, Slide } from 'react-toastify';\n\n// Components\nimport {\n    Feed, ProfilePage, PostCommentsPage, SignUpPage, LoginPage, NewPasswordPage,\n} from './pages';\nimport { Footer, Navigation } from './components';\nimport { useErrorMessage } from './hooks/useErrorMessage';\n\n\nexport const Home = () => {\n    return (\n        <div className = 'feed-wrapper'>\n            <div className = 'container'>\n                <Navigation />\n                <Outlet />\n            </div>\n        </div>\n    );\n};\n\n\nexport const App: React.FC = () => {\n    useErrorMessage();\n\n    return (\n        <>\n            <ToastContainer newestOnTop transition = { Slide } />\n            <main>\n                <Routes>\n                    <Route path = '/' element = { <Home /> } >\n                        <Route path = '/' element = { <Navigate to = '/feed' replace /> } />\n                        <Route path = '/feed' element = { <Feed /> } />\n                        <Route path = '/feed/:id' element = { <PostCommentsPage /> } />\n                        <Route path = '/profile' element = { <ProfilePage /> } />\n                        <Route path = '/new-password' element = { <NewPasswordPage /> } />\n                    </Route>\n                    <Route path = '/signup' element = { <SignUpPage /> } />\n                    <Route path = '/login' element = { <LoginPage /> } />\n                    <Route path = '*' element = { <Navigate to = '/feed' replace /> } />\n                </Routes>\n            </main>\n            <Footer />\n        </>\n    );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector }  from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { toastOptions } from '../constants/toastOptions';\nimport { authActions } from '../lib/redux/actions';\nimport { getErrorMessage }  from '../lib/redux/selectors/auth';\n\nexport const useErrorMessage = () => {\n    const errorMessage = useSelector(getErrorMessage);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (errorMessage) {\n            toast.error(errorMessage, toastOptions);\n\n            dispatch(authActions.resetError());\n        }\n    }, [errorMessage]);\n};\n","import { QueryClient }  from 'react-query';\n\nexport const queryClient = new QueryClient({\n    defaultOptions: {\n        queries: {\n            refetchOnWindowFocus: false,\n        },\n    },\n});\n","// Core\nimport { Provider }  from 'react-redux';\nimport { render } from 'react-dom';\nimport { QueryClientProvider } from 'react-query';\nimport { HashRouter } from 'react-router-dom';\n\n// Styles\nimport 'react-toastify/dist/ReactToastify.css';\nimport './theme/init.scss';\n\n// Instruments\nimport { store }  from './lib/redux/init/store';\n\n// App\nimport { App } from './App';\nimport { queryClient } from './lib';\n\nrender(\n    <Provider store = { store }>\n        <QueryClientProvider client = { queryClient }>\n            <HashRouter>\n                <App />\n            </HashRouter>\n        </QueryClientProvider>\n    </Provider>,\n    document.getElementById('root'),\n);\n\n"],"sourceRoot":""}